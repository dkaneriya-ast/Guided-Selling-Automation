name: Robot Framework Tests

on:
  workflow_dispatch:
    inputs:
      suite:
        description: "Robot test suite to run (e.g., Tests/GuidedSellingFlow.robot)"
        required: true
        default: "Tests/GuidedSellingFlow.robot"
      rerun:
        description: "Rerun failed tests? (true/false)"
        required: false
        default: "true"
      env:
        description: "Environment to run against (dev/stg/prod)"
        required: true
        default: "dev"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      ROBOT_WORKSPACE: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Detect CPU cores
        id: cpu
        run: |
          cores=$(nproc)
          echo "Detected CPU cores: $cores"
          echo "cores=$cores" >> $GITHUB_OUTPUT

      - name: Prepare Results folder
        run: |
          mkdir -p "$ROBOT_WORKSPACE/Results"
          rm -f "$ROBOT_WORKSPACE/Results/results.xlsx"

      - name: Run Robot tests with pabot
        id: run_tests
        # This step will continue even if tests fail, so the rerun step can execute
        continue-on-error: true 
        run: |
          pabot --processes ${{ steps.cpu.outputs.cores }} --testlevelsplit \
            --variable env:${{ github.event.inputs.env }} \
            --outputdir "$ROBOT_WORKSPACE/Results" \
            ${{ github.event.inputs.suite }}
          
          # Capture the exit code and pass it to subsequent steps
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Rerun failed tests (if any)
        id: rerun_tests
        if: ${{ steps.run_tests.outputs.exit_code != '0' && github.event.inputs.rerun == 'true' }}
        run: |
          echo "üîÅ Rerunning failed tests..."
          if [ ! -f "$ROBOT_WORKSPACE/Results/output.xml" ]; then
            echo "‚ùå output.xml not found, cannot rerun."
            exit 0 # Exit gracefully, as there's nothing to rerun
          fi
          
          # CORRECTED: Use pabot's native rerun functionality.
          # This command is simpler and works for any type of test (including DataDriver).
          pabot --rerunfailed "$ROBOT_WORKSPACE/Results/output.xml" \
            --outputdir "$ROBOT_WORKSPACE/Results/rerun" \
            --variable env:${{ github.event.inputs.env }} \
            --output rerun.xml \
            --log rerun_log.html \
            --report rerun_report.html

      - name: Merge results
        id: merge_results
        # Always run this step to ensure results are processed
        if: always()
        run: |
          # Check for the original output before attempting any merge
          if [ ! -f "$ROBOT_WORKSPACE/Results/output.xml" ]; then
             echo "No original output.xml found to merge. Skipping."
             exit 0
          fi
          
          # If a rerun happened and produced a new output, merge it with the original.
          if [ -f "$ROBOT_WORKSPACE/Results/rerun/rerun.xml" ]; then
            echo "Merging original and rerun results..."
            rebot --outputdir "$ROBOT_WORKSPACE/Results" \
              --output merged_output.xml \
              --log merged_log.html \
              --report merged_report.html \
              --merge "$ROBOT_WORKSPACE/Results/output.xml" "$ROBOT_WORKSPACE/Results/rerun/rerun.xml"
          else
            echo "No rerun results found. Finalizing original results."
            # For consistency, rename the original files to 'merged' so the artifact upload step always finds them.
            mv "$ROBOT_WORKSPACE/Results/output.xml" "$ROBOT_WORKSPACE/Results/merged_output.xml"
            mv "$ROBOT_WORKSPACE/Results/log.html" "$ROBOT_WORKSPACE/Results/merged_log.html"
            mv "$ROBOT_WORKSPACE/Results/report.html" "$ROBOT_WORKSPACE/Results/merged_report.html"
          fi

      - name: Check final test status and fail workflow if necessary
        if: always()
        run: |
          # The exit code from the first run will be non-zero if tests failed
          initial_exit_code=${{ steps.run_tests.outputs.exit_code }}
          
          echo "Initial run exit code: $initial_exit_code"
          
          if [ "$initial_exit_code" != "0" ]; then
            # If there was a failure, check if the merged report still contains fails
            echo "Checking merged results for failures..."
            # Use rebot to analyze the final output. It exits with 0 if no tests failed.
            rebot --nostatusrc -d "$ROBOT_WORKSPACE/Results" "$ROBOT_WORKSPACE/Results/merged_output.xml"
            final_status=$?
            if [ "$final_status" != "0" ]; then
              echo "::error::Tests failed even after rerun."
              exit 1
            else
              echo "‚úÖ All tests passed after rerun."
            fi
          else
            echo "‚úÖ All tests passed in the initial run."
          fi
          
      - name: Upload Robot Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-results
          # The path should point to where the final merged files are
          path: |
            Results/merged_report.html
            Results/merged_log.html
            Results/merged_output.xml
          retention-days: 7
